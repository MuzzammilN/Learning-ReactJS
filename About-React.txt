main.jsx is the main javascript file
app component is the root component
index.html main entry of the document


To return two functions form the app function you will need to use a fragment
a fragment is <> </>

so your return function should look like something similair to this
return(
<>
<Header/>
<Footer/>
</>
);

You can't use class to set an object as in JSX class is a reserved name you have to use
className ="" 


React hook =  Special function that allows functional components 
to use Readcat features without writing class Components (React v16.8)
(useState, useEffect, useContext, useReducer, useCallback, and more..)


useState() = A React hook that allows the creation of a stateful variable
and a setter function to update its value in the virtual DOM.
[name, setName]



onChange = event with handler used primarily with form elements
ex <input>, <textarea>, <select>, <radio> triggers a function every
time the value of the input changes

useEffect() = React Hook that tells react do some when you do something certain
re-renders
component mounts
state of a value

1. useEffect(() => {})  // Runs after every re-render
2. useEffect(() => {}, [])  //Runs only on most
3. useEffect(() => {}, [value]) //Runs on mount + when value changes

#1 Event Listeners
#2 DOM Manipulations
#3 Subscriptions (real-time updates)
#4 Fetching Data from an api
#5 Clean up when a component unmounts


useContext() = React hook that allows you to share values
               between multiple levels of components without      
               passing props through each level

PROVIDER COMPONENT
1. import {createContext} from 'react';
2. export const myContext = createContext();
3. <MyContext.Provider value={value}
    <Child />
    </MyContext.Provider>

CONSUMER COMPONENT 
1. import React, {useContext} from 'react';
   import { myContext } from './myComp';
2. const value = useContext(myContext);


useRef() = "Use Reference" Does not cause re-renders when its value changes.
            when you want a component to "remember" some information, but you
            don't want that information to trigger new renders.

            1. Accessing/Interacting with DOM elements
            2. Handling Focus, Animations, and Transitions
            3. Managing Timers and Intervals